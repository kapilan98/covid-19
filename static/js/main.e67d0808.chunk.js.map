{"version":3,"sources":["country.module.css","World.js","Country.js","Pagination.js","Footer1.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","World","loading","cases","active","deaths","recovered","updated","tcases","tdeaths","trecovered","style","justifyContent","Spinner","animation","role","className","styles","country","CardDeck","Card","bg","text","Body","Title","fontSize","Text","Footer","space","Country","posts","filterCountry","display","textAlign","CardColumns","map","data","i","key","boxShadow","backgroundColor","CardBody","CardText","src","countryInfo","flag","height","width","todayCases","todayDeaths","todayRecovered","CardTitle","Pagination","postsPerPage","totalPosts","pageNumbers","paginate","Math","ceil","push","number","Footer1","App","useState","latest","setLatest","results","setResults","setLoading","setWorld","setDisplay","currentPage","setCurrentPage","searchCountry","setSearchCountry","useEffect","axios","all","get","then","res","console","log","catch","err","indexOfLastPost","indexOfFirstPoat","currentPosts","slice","filter","item","includes","countrieslocation","lat","lng","long","fontFamily","color","overflow","borderRadius","lastUpdated","Date","parseInt","toString","bootstrapURLKeys","defaultCenter","defaultZoom","type","list","placeholder","onChange","e","target","value","id","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e67d0808.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"country\":\"country_country__2BL-k\",\"space\":\"country_space__3brfK\",\"cname\":\"country_cname__2bDG3\"};","import React from 'react'\r\nimport styles from './country.module.css'\r\nimport CountUp from 'react-countup'\r\n//import styles from './country.module.css'\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport {\r\n   CardImg, CardTitle, CardText,  CardSubtitle, CardBody,Row,Col,\r\n} from 'reactstrap';\r\n\r\nconst World=({loading,active,cases, deaths,recovered,updated,tcases,tdeaths,trecovered})=>{\r\n\r\n\r\nvar case1={cases}\r\nvar case2=case1.cases\r\n\r\n\r\n     if(loading){\r\n        return <div style={{justifyContent:\"center\"}}><Spinner animation=\"border\" role=\"status\">\r\n        <span className=\"sr-only\" style={{justifyContent:\"center\"}}>Hold on!. Data is being fetched......</span>\r\n      </Spinner></div>\r\n}\r\nelse{\r\nreturn(\r\n\r\n\t<div className={styles.country}>\r\n<CardDeck>\r\n  <Card \r\n  \tbg=\"secondary\" text=\"white\">\r\n    <Card.Body>\r\n      <Card.Title><h1 style={{fontSize:\"1.5rem\"}}>Cases</h1></Card.Title>\r\n      <Card.Text  style={{fontSize:\"3.5rem\"}}>\r\n\t\t{cases}   \t\r\n      </Card.Text>\r\n    </Card.Body>\r\n    <Card.Footer>\r\n      <small>Last updated on : {updated} </small>\r\n    </Card.Footer>\r\n  </Card>\r\n  <Card\r\n  bg=\"danger\" text=\"white\"\r\n  >\r\n    <Card.Body>\r\n      <Card.Title><h1 style={{fontSize:\"1.5rem\"}}>Deaths</h1></Card.Title>\r\n      <Card.Text style={{fontSize:\"3.5rem\"}}>{deaths}\r\n      </Card.Text>\r\n    </Card.Body>\r\n    <Card.Footer>\r\n      <small>Last updated on : {updated}</small>\r\n    </Card.Footer>\r\n  </Card>\r\n  <Card\r\n  bg=\"success\" text=\"white\">\r\n    <Card.Body>\r\n\t  <Card.Title ><h1 style={{fontSize:\"1.5rem\"}}>Recovered</h1></Card.Title>\r\n      <Card.Text style={{fontSize:\"3.5rem\"}}>{recovered}\r\n      </Card.Text>\r\n    </Card.Body>\r\n    <Card.Footer>\r\n      <small>Last updated on : {updated}</small>\r\n    </Card.Footer>\r\n  </Card>\r\n</CardDeck>\r\n\t\t<div className={styles.space}/>\r\n\r\n\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default World;","import React from 'react'\r\nimport styles from './country.module.css'\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport Columns from 'react-columns'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport {\r\n   CardImg, CardTitle, CardText,  CardSubtitle, CardBody,Row,Col\r\n} from 'reactstrap';\r\n\r\n\r\n\r\n  const Country=({posts,loading,filterCountry,display})=>{\r\n\r\n\r\n  \tvar queries=[{\r\n  \t\tcolumns:4,\r\n  \t\tquery:'min-width:500px'},\r\n  \t\t{\r\n  \t\t\tcolumns:5,\r\n  \t\t\tquery:'min-width:1000px'\r\n  \t}];\r\n \r\n  \tif(loading){\r\n  \t\t\treturn <div style={{justifyContent:\"center\"}}><Spinner animation=\"border\" role=\"status\">\r\n\t\t<span className=\"sr-only\" style={{textAlign:\"center\"}}>\r\n\t\tHold on!. Data is being fetched......</span>\t\t\r\n\t\t</Spinner>\r\n</div>\r\n\r\n  \t}\r\n  \tif(display)\r\n  \t{\r\n  \t\treturn(\r\n  \t\t\t<CardColumns> {\r\n  \t\t\tfilterCountry.map((data,i)=>(\r\n        \t \t <Card\r\n        \t \t key={i}\r\n        \t  \tbg=\"skyblue\"\r\n        \t  \ttext=\"dark\"\r\n        \t  \tclassName=\"text-center\"\r\n        \t  \tstyle={{ boxShadow:\"0.2rem 2px 2px #fff\",backgroundColor:\"skyblue\"}}>\r\n          \t\t     \r\n          \t\t<CardBody>\r\n          \t\t\t     \r\n          \t\t<CardText style={{fontSize:\"1.7rem\"}}><img src={data.countryInfo.flag} height=\"35px\" width=\"70px\"/>\t\t{data.country}</CardText>\r\n                               <CardText>Total Cases :{data.cases}</CardText>\r\n                           <CardText>Today Deaths :{data.deaths}</CardText>\r\n                          \r\n                            <CardText>Total Recovered :{data.recovered}</CardText>\r\n\t                           <CardText>Active cases :{data.active}</CardText>\r\n                           <CardText>Today Cases :{data.todayCases}</CardText>\r\n                           <CardText>Death(s) :{data.todayDeaths}</CardText>\r\n                           <CardText>Today Recovered :{data.todayRecovered}</CardText>\r\n                            </CardBody>\r\n               </Card>\r\n        \t\t))\r\n    \t\t}</CardColumns>\r\n    \t\t)\r\n  \t}\r\n\r\n\r\n     return(\r\n          <CardColumns> \r\n          {\r\n          \tposts.map((data,i)=>( \r\n          \t\t\r\n          \t\t<Card key={i}\r\n\r\n        \t  \tbg=\"skyblue\"\r\n        \t  \ttext=\"bold\"\r\n\r\n        \t  \tclassName=\"text-center\"\r\n        \t  \tstyle={{ boxShadow:\"0.5rem 0.5rem 0.5rem #fff\",backgroundColor:\"skyblue\" ,width:\"23.4rem\"}}>\r\n          \t\t<CardBody>\r\n          \t\t\t\r\n          \t\t     \r\n          \t\t<CardTitle style={{text:\"bold\",fontSize:\"1.7rem\"}}><img src={data.countryInfo.flag} height=\"35px\" width=\"70px\"/>\t\t{data.country}</CardTitle>\r\n                               <CardText>Total Cases :{data.cases}</CardText>\r\n                           <CardText>Total Death(s) :{data.deaths}</CardText>\r\n                            <CardText>Total Recovered :{data.recovered}</CardText>\r\n                           <CardText>Active cases :{data.active}</CardText>\r\n                           <CardText>Today Cases :{data.todayCases}</CardText>\r\n                           <CardText>Today Death(s) :{data.todayDeaths}</CardText>\r\n                           <CardText>Today Recovered :{data.todayRecovered}</CardText>\r\n                            </CardBody>\r\n                </Card>\r\n                \t\r\n        ))\r\n\r\n    }\r\n   </CardColumns>)\r\n         \r\n}\r\n\r\nexport default Country;","import React from 'react';\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <ul className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n           \r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\n\r\nconst Footer1 = () => {\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"Fcontainer\">\r\n \t\t       <span className=\"Fcontainer1\">Copyright <span>&#169;</span> 2020 Covid-19 Live Statistics. All Rights Reserved. Developed by Kapilan</span> \t\r\n \r\n    </div>)\r\n};\r\n\r\nexport default Footer1","import React,{useEffect,useState} from 'react';\nimport axios from 'axios'\nimport World from './World'\nimport styles from './country.module.css'\nimport Country from './Country'\nimport Pagination from './Pagination'\nimport Map from './Map'\nimport Footer1 from './Footer1.js'\nimport GoogleMapReact from 'google-map-react';\nconst App= function (){\n  \n// const Map = ReactMapboxGl({\n//   accessToken:\n//    'pk.eyJ1Ijoia2FwaWxhbiIsImEiOiJja2NoY3pnZDExMGtsMnJtMnFoaHd0cWlwIn0.z4g91BZ7QgqRQV-2Oy_6qQ'\n// });\n const [latest, setLatest]=useState([]);\n\n  const [results,setResults]=useState([]); \n\n  const [loading,setLoading]=useState(false);\n\n  const [world, setWorld]=useState([]);\n  const [display, setDisplay]=useState(false);\n  const [currentPage, setCurrentPage]=useState(1)\n\n  const [postsPerPage,setPostsPerPage]=useState(\"12\"); \n\n  const [searchCountry,setSearchCountry]=useState(\"\") \n\n\n  useEffect(()=>{\n   \n          setLoading(true);\n    axios\n        .all([\n    axios.get(\"https://corona.lmao.ninja/v2/all\"),\n    axios.get(\"https://corona.lmao.ninja/v2/countries\"),\n    axios.get(\"https://www.trackcorona.live/api/countries\")\n    ])\n    .then(res=>{\n\n        setLatest(res[0].data);\n      //console.log(res[0].data);      \n      console.log(res[2].data.data);\n      setResults(res[1].data);\n      setWorld(res[2].data.data);\n      setLoading(false);\n    })\n    .catch(err=>{\n      console.log(err)\n    })\n  },[display])\n\n    //const {location} = world\n    //console.log(location)\n  \nconst indexOfLastPost= currentPage * postsPerPage;\n\nconst indexOfFirstPoat= indexOfLastPost - postsPerPage; \n\nconst currentPosts=results.slice(indexOfFirstPoat,indexOfLastPost)\n\nconst paginate = pageNumber => setCurrentPage(pageNumber);\n\n\nconst filterCountry= results.filter(item =>{\n  return  searchCountry!==\"\" ? item.country.includes(searchCountry):item;\n})\n\n const countrieslocation=results.map((data,i)=>{\n      return(\n            <div \n                key={i}\n              lat={data.countryInfo.lat}\n              lng={data.countryInfo.long}\n              style={{\n                fontFamily:\"Times New Roman\",\n                color:\"red\",\n                backgroundColor:'rgba(182, 152, 152, 0.5)',\n                height:\"73px\",\n                width:\"103px\",\n                textAlign:\"center\",\n                overflow: 'hidden',\n                borderRadius:80/5,\n              }}\n                > <h6 style={{color:\"rgba(242, 152,0)\"}}>C - {data.cases}</h6>\n                <h6 style={{color:\"black\"}}>{data.country} <img src={data.countryInfo.flag} height=\"13px\" width=\"18px\"/></h6> \n                <span style={{color:\"rgba(142, 252,0)\"}}>R - {data.recovered}</span>\n                </div>\n        )\n\n    })\n\nconst clickHandler=(e)=>{\n  setSearchCountry(e.target.value)\n  setDisplay(true);\n}\n\nconst date= new Date(parseInt(latest.updated))\nconst lastUpdated=date.toString()\n  return(\n    <div>\n    \n    <h1 className=\"fheading\"> Covid-19 Live Statistics </h1>\n    <div className={styles.space}/>\n\n \n    <h1 className=\"wheading\">World wide Statistics</h1>\n        <div className={styles.space}/>\n\n        <World active={latest.active}\n         cases={latest.cases}\n         deaths={latest.deaths}\n         recovered={latest.recovered}\n         tcases={latest.todayCases}\n         tdeaths={latest.todayDeaths}\n         trecovered={latest.todayRecovered}\n         loading={loading}\n         updated={lastUpdated}\n         />\n         <div style={{ height: '100vh', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: \"AIzaSyDzc7NqvRGBVU8zZkpqSIUtHkDp_NLldCM\" }}\n          defaultCenter={ {\n                    lat: 28.7041,\n                    lng: 77.1025\n\n                }}\n          defaultZoom={4} >\n            {countrieslocation}\n        </GoogleMapReact>\n        <br/>\n        <div style={{textAlign:\"center\"}}>\n          <h4 style={{color:\"rgba(242, 152,0)\"}}>C: Cases</h4>\n          <h4 style={{color:\"rgba(142, 252,0)\"}}>R: Recovered</h4>\n      <div className={styles.space}/>\n        </div>\n      </div>\n      <div className={styles.space}/>\n            <div className={styles.space}/>\n        <form>\n        <section className=\"searchbox-wrap\">\n          <input type=\"text\" list=\"data\" placeholder=\"Search for a country....\" \n            className=\"searchbox\"\n          onChange={clickHandler} />\n\n\n             <datalist id=\"data\">\n                {results.map((item, key) =>\n              <option key={key} value={item.country} />\n    )}\n  </datalist>\n      </section>\n          </form>\n\n            <Country posts={currentPosts} filterCountry={filterCountry} display={display} loading={loading}/>\n         <Pagination display={display}\n        postsPerPage={postsPerPage}\n        totalPosts={results.length}\n        paginate={paginate}/>\n         <Footer1/> \n    </div>\n\n    )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}